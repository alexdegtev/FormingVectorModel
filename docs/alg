
	+-+-+-+
	|8|1|2|
	+-+-+-+
A =	|7|0|3|
	+-+-+-+
	|6|5|4|
	+-+-+-+

A - отображает текущее состояние.
На каждой итерации анализируем матрицу A.

! При добавлении объекта в objects устанавливать связи с другими объектами
! При добавлении объекта в objects проверить точку пересечения

state {
	- A
	+ start
	+ prev
	+ cur
	- neighbours
	+ next    // Все непосещнные neighbours
}

objects


IObject {
	+ вектор пересечений {
		Точка пересечения
		вектор объектов, пересекающихся в этой точке (ссылки на другие объекты)
	}
	...
}

Пока есть непосещённые точки
	Если state == null
		state = find_new_state()

	n = state.neighbours.count
	n == 0:
	n == 1:
		Пометить state.cur как посещённую
		Если state.prev == null    // Нашли первую точку отрезка
			---
			-x-	
			-x-

			state.prev = state.cur
			state.start = state.cur
			state.cur = state.next[0]
			Переход на след итерацию
		Иначе    // Нашли последнюю точку отрезка
			-x-
			-x-	
			---

			objects.add(line(state.start, state.cur))
			Все исключённые из рассмотрения точки пометить как непосещённые
			state = null
			Переход на след итерацию
	n == 2:
		Если state.prev == null    // Нашли первую точку с двумя соседними
			state.prev = state.cur
			state.start = state.cur
			Создать точку пересечения (state.cur)
			Если есть соседняя точна на горизонтальном или вертикальном направлении и она непосещённая
				---
				-x-
				-xx

				state.cur = Выбранная точка
				Другую соседнюю пометить как исключённую из рассмотрения
			Иначе
				---
				-x-
				x-x

				Для каждой точки из state.next
					Если next не посещённая
						state.cur = next

			Число посещённых = 0
			Для каждой точки из state.next
					Если next посещённая
						Число посещённых ++
			Если число посещённых == state.next - 1
				Пометить state.cur как посещённую
			Переход на след итерацию
		Иначе
			Пометить state.cur как посещённую
			Если is_aligned(state.prev, state.cur, state.next[0])    // Находимся внутри отрезка
				-x-
				-x-
				-x-

				state.prev = state.cur
				state.cur = state.next[0]
				Переход на след итерацию
			Иначе    // Находимся с точке соединения двух отрезков
				-x-
				-x-
				--x

				objects.add(line(state.start, state.cur))
				Все исключённые из рассмотрения точки пометить как непосещённые
				Создать точку пересечения (state.cur)
				state.start = state.cur
				state.prev = state.cur
				state.cur = state.next[0]
	n == 3:
		Создать точку пересечения (state.cur)
		Если state.prev == null    // Нашли первую точку с тремя соседними
			state.prev = state.cur
			state.start = state.cur
			Если есть соседняя точна на горизонтальном или вертикальном направлении и непосещённая
				---
				-x-
				xxx

				state.cur = Выбранная точка
				Две другие пометить как исключённые из рассмотрения
			Иначе
				Для каждой точки из state.next
					Если next непосещённая
						state.cur = next

			Число посещённых = 0
			Для каждой точки из state.next
					Если next посещённая
						Число посещённых ++
			Если число посещённых == state.next - 1
				Пометить state.cur как посещённую
			Переход на след итерацию
		Иначе
			Для каждой точки из state.next
				Если is_aligned(state.prev, state.cur, next) и next непосещённая
					-x-
					-x-
					-xx
					
					state.prev = state.cur
					state.cur = next
					Другую соседнюю пометить как исключённую
					Переход на след итерацию
			-x-
			-x-
			x-x

			objects.add(line(state.start, state.cur))
			Все исключённые из рассмотрения точки пометить как непосещённые
			Создать точку пересечения (state.cur)
			state.start = state.cur
			state.prev = state.cur
			Для каждой точки из state.next
					Если next непосещённая
						state.cur = next
			Переход на след итерацию
	n == 4:
		Создать точку пересечения (state.cur)
		Если state.prev == null    // Нашли первую точку с четырьмя соседними
			state.prev = state.cur
			state.start = state.cur
			Если есть соседняя точна на горизонтальном или вертикальном направлении и непосещённая
				---
				-xx
				xxx

				state.cur = Выбранная точка
				Три другие пометить как исключённые из рассмотрения
			Иначе
				Для каждой точки из state.next
					Если next непосещённая
						state.cur = next

			Число посещённых = 0
			Для каждой точки из state.next
					Если next посещённая
						Число посещённых ++
			Если число посещённых == state.next - 1
				Пометить state.cur как посещённую
			Переход на след итерацию
		Иначе
			Для каждой точки из state.next
				Если is_aligned(state.prev, state.cur, next) и next непосещённая
					-x-
					-x-
					xxx
					
					state.prev = state.cur
					state.cur = next
					Другуе соседние пометить как исключённые
					Переход на след итерацию
			-x-
			-xx
			x-x	

			objects.add(line(state.start, state.cur))
			Все исключённые из рассмотрения точки пометить как непосещённые
			Создать точку пересечения (state.cur)
			state.start = state.cur
			state.prev = state.cur
			Для каждой точки из state.next
					Если next непосещённая
						state.cur = next
			Переход на след итерацию
	n == 5:
		Создать точку пересечения (state.cur)
		Если state.prev == null    // Нашли первую точку с четырьмя соседними
			state.prev = state.cur
			state.start = state.cur
			Если есть соседняя точна на горизонтальном или вертикальном направлении и непосещённая
				--

				state.cur = Выбранная точка
				Три другие пометить как исключённые из рассмотрения
			Иначе
				Для каждой точки из state.next
					Если next непосещённая
						state.cur = next

			Число посещённых = 0
			Для каждой точки из state.next
					Если next посещённая
						Число посещённых ++
			Если число посещённых == state.next - 1
				Пометить state.cur как посещённую
			Переход на след итерацию
		Иначе
			Для каждой точки из state.next
				Если is_aligned(state.prev, state.cur, next) и next непосещённая
					-x-
					-xx
					xxx
					
					state.prev = state.cur
					state.cur = next
					Другуе соседние пометить как исключённые
					Переход на след итерацию
			--

			objects.add(line(state.start, state.cur))
			Все исключённые из рассмотрения точки пометить как непосещённые
			Создать точку пересечения (state.cur)
			state.start = state.cur
			state.prev = state.cur
			Для каждой точки из state.next
					Если next непосещённая
						state.cur = next
			Переход на след итерацию
	n == 6:
		Создать точку пересечения (state.cur)
		Если state.prev == null    // Нашли первую точку с четырьмя соседними
			state.prev = state.cur
			state.start = state.cur
			Если есть соседняя точна на горизонтальном или вертикальном направлении и непосещённая
				--

				state.cur = Выбранная точка
				Три другие пометить как исключённые из рассмотрения
			Иначе
				Для каждой точки из state.next
					Если next непосещённая
						state.cur = next

			Число посещённых = 0
			Для каждой точки из state.next
					Если next посещённая
						Число посещённых ++
			Если число посещённых == state.next - 1
				Пометить state.cur как посещённую
			Переход на след итерацию
		Иначе
			Для каждой точки из state.next
				Если is_aligned(state.prev, state.cur, next) и next непосещённая
					-x-
					-xx
					xxx
					
					state.prev = state.cur
					state.cur = next
					Другуе соседние пометить как исключённые
					Переход на след итерацию
			--

			objects.add(line(state.start, state.cur))
			Все исключённые из рассмотрения точки пометить как непосещённые
			Создать точку пересечения (state.cur)
			state.start = state.cur
			state.prev = state.cur
			Для каждой точки из state.next
					Если next непосещённая
						state.cur = next
			Переход на след итерацию