algorithm_2

class IObject {
	List<Point> intersection_points	// Точки пересечения с другими объектами
	List<Point> special_point
}

enum VisitState {
	unvisited,
	visited,
	excluded
}

class Pixel {
	VisitState state
}

class ImageWithVisitedMarks {
	bool has_unvisited_pixels()
	Pixel find_first_unvisited_pixel()
	List<Pixel> get_neighbours( Pixel central )	// Все кроме VisitState.excluded
	void convert_all_excluded_to_unvisited()
	Pixel find_vertical_or_horizontal_neghbour( Pixel central, List<Pixel> neigbours )
	bool is_aligned( Pixel a, Pixel b, Pixel c )
}

class VectorizationState {
	Pixel current
	Pixel previous
	Pixel start	// Начальная точка фигуры (отрезка) 
	List<Pixel> neigbours
	List<Pixel> next	// neigbours, кроме previous и VisitState.visited
}

add_object( Line line, special_points ) {
	objects.add( line )

	iwvm.convert_all_excludet_to_unvisited()

	for( i : special_points ) {
		for ( n : iwvm.get_neighbours( i ) ) {
			if ( n.state == VisitState.unvisited ) {
				i.state = VisitState.unvisited
				break
			}
		}
	}
}


// ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????

add_to_special( Point point ) {
	bool has_aligned = false
	for( i:vs.next ) {
		if( ImageWithVisitedMarks.is_aligned( vs.previous, vs.current, i )) {
			if( ImageWithVisitedMarks.has_horizontal_neighbours(vs.previous, vs.current)) {
				special_points.add( vs.current )
			}
		}
	}

	if(has_aligned == false) {
		special_points.add( vs.current )
	}
}

function vectorization {

	List<IObject> objects
	iwvm = new ImageWithVisitedMarks( image )
	vs = nullptr
	List<Point> special_points

	while ( iwvm.has_unvisited_pixels() ) {
		if ( vs == null ) {
			Pixel p = iwvm.find_first_unvisited_pixel()
			if ( p == null ) {
				break
			} else {
				vs = new VectorizationState()
				vs.current = p
			}
		}
		
		vs.neigbours = iwvm.get_neighbours( vs.current )

		switch ( vs.neigbours.count ) {
			case 0:
				break

			case 1:
				special_points.add( vs.current )
				vs.current.state = VisitState.visited

				if ( vs.previous == null ) {
					vs.start = vs.current
					vs.previous = vs.current
					vs.current = vs.next[0]
				} else {
					add_object( Line( vs.start, vs.current, special_points), special_points))

					special_points.clear()

					vs = null
				}

				break

			case 2:
				vs.current.state = VisitState.visited

				Pixel next = vs.next[0]

				if ( vs.previous == null ) {
					for ( i : vs.next ) {
						if( i != next) {
							i.state = VisitState.excluded
						}
					}

					special_points.add( vs.current )

					vs.start = vs.current
				} else {
					if(!ImageWithVisitedMarks.is_aligned(vs.previous, vs.current, next)) {
						add_object( Line( vs.start, vs.current, special_points)), special_points)

						special_points.clear()

						special_points.add(vs.current)

						vs.start = vs.current
					}
				}

				vs.previous = vs.current
				vs.current = next

				break

			case 3:
			case 4:
			case 5:
			case 6:
			case 7:
			case 8:
				vs.current.state = VisitState.visited

				Pixel next

				if( vs.previous == null ) {
					next = vs.next[0]

					for ( i : vs.next ) {
						if ( i != next ) {
							i.state = VisitState.excluded
						}
					}

					special_points.add( vs.current )

					vs.start = vs.current
				} else {
					next = null
					for( i : vs.next ) {
						if( ImageWithVisitedMarks.is_aligned( vs.previous, vs.current, i )){
							next = i
							break
						}
					}

					if( next == null ) {
						next = vs.next[0]

						add_object( Line( vs.start, vs.current, special_points ), special_points)

						special_points.clear()
			
						special_points.add(vs.current)

						vs.start = vs.current
					}

					for ( i : vs.next ) {
						if ( i != next ) {
							i.state = VisitState.excluded
						}
					}
				}

				vs.previous = vs.current
				vs.current = next

				break

			default:
				break

			case n:
				vs.current.state = VisitState.visited

				Pixel next

				if( vs.previous == null ) {
					special_points.add( vs.current )

					next = vs.next[0]

					for ( i : vs.next ) {
						if ( i != next ) {
							i.state = VisitState.excluded
						}
					}

					vs.start = vs.current
				} else {
					next = null

					for( i : vs.next ) {
						if( ImageWithVisitedMarks.is_aligned( vs.previous, vs.current, i )) {
							next = i
							break
						}
					}

					if( next == null ) {
						special_points.add( vs.current )

						add_object( Line( vs.start, vs.current, special_points ), special_points)
						special_points.clear()

						if ( vs.next.length == 0 ) {
							vs = null
							continue
						} else {
							next = vs.next[0]
							special_points.add( vs.current )
							vs.start = vs.current
						}
					}

					for ( i : vs.next ) {
						if ( i != next ) {
							i.state = VisitState.excluded
						}
					}
				}

				vs.previous = vs.current
				vs.current = next

				break
		}
	}

	return objects
}