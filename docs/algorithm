algorithm_2

class IObject {
	List<Point> intersection_points	// Точки пересечения с другими объектами
	List<Point> special_point
}

enum VisitState {
	unvisited,
	visited,
	excluded
}

class Pixel {
	VisitState state
}

class ImageWithVisitedMarks {
	bool has_unvisited_pixels()
	Pixel find_first_unvisited_pixel()
	List<Pixel> get_neighbours( Pixel central )	// Все кроме VisitState.excluded
	void convert_all_excluded_to_unvisited()
	Pixel find_vertical_or_horizontal_neghbour( Pixel central, List<Pixel> neigbours )
	bool is_aligned( Pixel a, Pixel b, Pixel c )
}

class VectorizationStatkbe {
	Pixel current
	Pixel previous
	Pixel start	// Начальная точка фигуры (отрезка) 
	List<Pixel> neigbours
	List<Pixel> next	// neigbours, кроме previous и VisitState.visited
}

add_object( Line line, special_points ) {
	objects.add( line )

	iwvm.convert_all_excludet_to_unvisited()

	for( i : special_points ) {
		for ( n : iwvm.get_neighbours( i ) ) {
			if ( n.state == VisitState.unvisited ) {
				i.state = VisitState.unvisited
				break
			}
		}
	}
}


// ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????

add_to_special( Point point ) {
	bool has_aligned = false
	for( i:vs.next ) {
		if( ImageWithVisitedMarks.is_aligned( vs.previous, vs.current, i )) {
			if( ImageWithVisitedMarks.has_horizontal_neighbours(vs.previous, vs.current)) {
				special_points.add( vs.current )
			}
		}
	}

	if(has_aligned == false) {
		special_points.add( vs.current )
	}
}

function vectorization {

	List<IObject> objects
	iwvm = new ImageWithVisitedMarks( image )
	vs = nullptr
	List<Point> special_points

	while ( iwvm.has_unvisited_pixels() ) {
		if ( vs == null ) {
			Pixel p = iwvm.find_first_unvisited_pixel()
			if ( p == null ) {
				break
			} else {
				vs = new VectorizationState()
				vs.current = p
			}
		}
		
		vs.neigbours = iwvm.get_neighbours( vs.current )

		if( vs.neighbours.count == 0 ) {
			continue
		}


		vs.current.state = VisitState.visited

		Pixel next

		if( vs.previous == null ) {
			special_points.add( vs.current )

			next = vs.next[0]

			for ( i : vs.next ) {
				if ( i != next ) {
					i.state = VisitState.excluded
				}
			}

			vs.start = vs.current
		} else {
			next = null

			add_special_point()

			for( i : vs.next ) {
				if( ImageWithVisitedMarks.is_aligned( vs.previous, vs.current, i )) {
					next = i
					break
				}
			}

			if( next == null ) {
				add_object( Line( vs.start, vs.current, special_points ), special_points)
				special_points.clear()

				if ( vs.next.length == 0 ) {
					vs = null
					continue
				} else {
					next = vs.next[0]
					special_points.add( vs.current )
					vs.start = vs.current
				}
			}

			for ( i : vs.next ) {
				if ( i != next ) {
					i.state = VisitState.excluded
				}
			}
		}

		vs.previous = vs.current
		vs.current = next
	}

	return objects
}



add_special_point() {
	bool has_aligned = false
	for( i : vs.next ) {
		if( ImageWithVisitedMarks.is_aligned( vs.previous, vs.current, i )) {
			has_aligned = true
			break
		}
	}

	bool has_horizontal_neigbours = false
	if( ImageWithVisitedMarks.get_horizontal_neigbour(vs.previous, vs.current)) {
		has_horizontal_neigbours = true
	}

	bool need_to_add = false

	if( has_horizontal_neigbours ) {
		need_to_add = true
	} else {
		if( !has_aligned ) {
			need_to_add = true
		}
	}

	if( need_to_add ) {
		special_points.add( vs.current )
	}
}